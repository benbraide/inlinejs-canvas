import { IElementScopeCreatedCallbackParams } from "@benbraide/inlinejs";
import { CustomElement } from '@benbraide/inlinejs-element';
import { ICanvasComponent, ICanvasPosition, ICanvasSize, ICanvasSurface } from "../types";
export declare class CanvasSurfaceElement extends CustomElement implements ICanvasSurface {
    protected shadow_: HTMLCanvasElement | null;
    protected ctx_: CanvasRenderingContext2D | null;
    protected withMouse_: Element | null;
    protected mouseOffset_: ICanvasPosition | null;
    protected rendered_: boolean;
    protected queued_: boolean;
    protected hidden_: boolean;
    vsync: boolean;
    locked: boolean;
    manual: boolean;
    priorityAware: boolean;
    UpdateHiddenProperty(value: boolean): void;
    UpdateWidthProperty(value: number): void;
    UpdateHeightProperty(value: number): void;
    constructor();
    GetComponentChildren(): ICanvasComponent[];
    Render(): void;
    IsPriorityAware(): boolean;
    Refresh(): void;
    GetContext(): CanvasRenderingContext2D | null;
    GetSurfaceContext(): CanvasRenderingContext2D | null;
    GetSurfaceSize(): ICanvasSize;
    GetSize(): ICanvasSize;
    GetFixedSize(): ICanvasSize;
    GetNative(): HTMLCanvasElement | null;
    GetBlob(type?: string): Promise<Blob | null> | null;
    GetDataUrl(type?: string): string;
    protected HandleElementScopeCreated_({ scope, ...rest }: IElementScopeCreatedCallbackParams, postAttributesCallback?: (() => void) | undefined): void;
    protected InitializeShadow_(): void;
    protected Render_(): void;
    protected RenderCallback_(): void;
    protected FindWithMouse_(): Element | null;
    protected UpdateWithMouse_(el: Element | null): void;
    protected RemoveWithMouse_(resetOffset: boolean): void;
}
export declare function CanvasSurfaceCompact(): void;
